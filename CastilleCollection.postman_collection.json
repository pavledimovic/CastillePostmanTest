{
	"info": {
		"_postman_id": "c53cec9b-b52e-4461-9715-61d908a3deaa",
		"name": "CastilleCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CastileRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5bc506a3-d016-4c47-9b1a-91377c7be0a5",
						"exec": [
							"console.log(\"test\");",
							"function IsValidJson(str) {",
							"    try {",
							"        JSON.parse(str);",
							"    }",
							"    catch (e) {",
							"        return false;",
							"    }",
							"    return true;",
							"}",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"pm.test(\"Has Content-Type\", function () {",
							"    contentTypeHeaderExists;",
							"})",
							" ",
							"if (contentTypeHeaderExists) {",
							"    // tests[\"Content-Type is application/json\"] = ",
							"    //   responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"    pm.test(\"Content-Type is application/json\", function(){",
							"        responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"    })",
							"    //tests['response is valid JSON'] = IsValidJson(responseBody);",
							"    pm.test(\"response is valid JSON\", function() {",
							"        IsValidJson(responseBody);",
							"    })",
							"}",
							"pm.test(\"Assert that title node text is: delectus aut autem\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"delectus aut autem\");",
							"});",
							"pm.test(\"Assert that a node called title exists\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"title\");",
							"});",
							"let response = pm.response.json(),",
							"    savedData = JSON.stringify(response);",
							"",
							"pm.environment.set(\"savedData\", savedData);",
							"",
							"if(IsValidJson(responseBody)){",
							"    var responseJSON = JSON.parse(responseBody);",
							"    var completed = responseJSON.completed;",
							"    //tests['completed is false'] = !completed;",
							"    pm.test(\"completed is false\", function(){",
							"        !completed;",
							"    })",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"myData\": [{{savedData}}]\r\n}"
				},
				"url": {
					"raw": "{{url}}/todos/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"todos",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6148afc9-68ba-44f8-8d81-62528d55f011",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8752690f-335f-4458-98b1-4c0922dd52f3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f2d82d6c-9eb2-41db-8908-821aa9e44646",
			"key": "url",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		}
	]
}